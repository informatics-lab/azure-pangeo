
kind: ConfigMap
apiVersion: v1
metadata:
  name: dask-config
data:
  config.yaml:  |-
    distributed:
      version: 2

      dashboard:
        link: /user/{JUPYTERHUB_USER}/proxy/{port}/status

      scheduler:
        idle-timeout: 3600s
      
      admin:
        tick:
          limit: 5s

    logging:
      distributed.core: warning
      distributed.scheduler: warning
      distributed: warning
      bokeh: critical
      # http://stackoverflow.com/questions/21234772/python-tornado-disable-logging-to-stderr
      tornado: critical
      tornado.application: error

    kubernetes:
      name: dask-{JUPYTERHUB_USER}-{uuid}
      worker-template:
        spec:
          securityContext:
            runAsUser: 0
          restartPolicy: Never
          containers:
            - name: dask-${JUPYTERHUB_USER}
              image: ${JUPYTER_IMAGE_SPEC}
              args: [run_as_conda_env.sh,"datasci", dask-worker, --nthreads, '1', --no-bokeh, --memory-limit, 6GB, --death-timeout, '60', --local-directory, '/scratch']
              resources:
                limits:
                  cpu: "1"
                  memory: 6G
                requests:
                  cpu: "1"
                  memory: 6G
              volumeMounts:
                - name: dask-config
                  mountPath: /etc/dask
                  readOnly: true

                - name: data-share
                  mountPath: /data/share

                - mountPath: /home/jovyan
                  name: home
                  subPath: home/${JUPYTERHUB_USER}
                  readOnly: true

                - mountPath: /envs
                  name: home
                  subPath: envs/auto-build-envs
                  readOnly: true

                - name: aws-earth-nc-files
                  mountPath: /data/aws-earth-nc-files
                  readOnly: true

                - name: cssp-china
                  mountPath: /data/cssp-china
                  readOnly: false

                - name: dm-ukv-data
                  mountPath: /data/dm-ukv-data
                  readOnly: true

                - name: misc
                  mountPath: /data/misc
                  readOnly: false

          volumes:
            - name: dask-config
              configMap:
                name: dask-config

            - name: data-share
              persistentVolumeClaim:
                claimName: pvc-nfs-data

            - name: home
              persistentVolumeClaim:
                claimName: pvc-nfs

            - name: aws-earth-nc-files
              flexVolume:
                driver: "azure/blobfuse"
                readOnly: true
                secretRef:
                  name: blobfusecreds
                options:
                  container: aws-earth-nc-files
                  tmppath: /tmp/aws-earth-nc-files
                  mountoptions: "--file-cache-timeout-in-seconds=600"

            - name: cssp-china
              flexVolume:
                driver: "azure/blobfuse"
                readOnly: false
                secretRef:
                  name: blobfusecreds
                options:
                  container: cssp-china
                  tmppath: /tmp/cssp-china
                  mountoptions: "--file-cache-timeout-in-seconds=600"

            - name: dm-ukv-data
              flexVolume:
                driver: "azure/blobfuse"
                readOnly: true
                secretRef:
                  name: blobfusecreds
                options:
                  container: dm-ukv-data
                  tmppath: /tmp/dm-ukv-data
                  mountoptions: "--file-cache-timeout-in-seconds=600"
            
            - name: misc
              flexVolume:
                driver: "azure/blobfuse"
                readOnly: false
                secretRef:
                  name: blobfusecreds
                options:
                  container: misc
                  tmppath: /tmp/misc
                  mountoptions: "--file-cache-timeout-in-seconds=600"

    labextension:
      factory:
        module: dask_kubernetes
        class: KubeCluster
        args: []
        kwargs: {}
